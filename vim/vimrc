"   ___  _  _  ____  ___  _____  ____
"  / _ \( \/ )(  _ \/ __)(  _  )(  _ \
" ( (_) ))  (  ) _ <\__ \ )(_)(  )(_) )
"  \___/(_/\_)(____/(___/(_____)(____/


"""""""""""""""""""""""""""
" Vundle init
"""""""""""""""""""""""""""
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" Interafce
    Plugin 'vim-airline/vim-airline'
    Plugin 'vim-airline/vim-airline-themes'
    Plugin 'scrooloose/nerdtree'
    Plugin 'jistr/vim-nerdtree-tabs'
    Plugin 'Raimondi/delimitMate'
    Plugin 'christoomey/vim-tmux-navigator'
    Plugin 'Yggdroot/indentLine'

" Syntax
    Plugin 'vim-syntastic/syntastic'
    Plugin 'ekalinin/Dockerfile.vim'
    Plugin 'pearofducks/ansible-vim'
    Plugin 'PotatoesMaster/i3-vim-syntax'
	Plugin 'vim-scripts/indentpython.vim'
    Plugin 'nvie/vim-flake8'
" Git
    Plugin 'airblade/vim-gitgutter'
    Plugin 'tpope/vim-fugitive'
" Python 
    Plugin 'klen/python-mode'            
    Plugin 'davidhalter/jedi-vim'       
    Plugin 'mitsuhiko/vim-jinja'    
    Plugin 'mitsuhiko/vim-python-combined' 

call vundle#end()

filetype plugin indent on

"""""""""""""""""""""""""""
" Configuration Section
"""""""""""""""""""""""""""
" Basic config
    syntax on
    hi clear SignColumn

    " on all features
    set nocompatible

    " global clipboard
    set clipboard=unnamed,unnamedplus

    tab sball
    set switchbuf=useopen

    " backspace as bacspace (:
    set backspace=indent,eol,start

    aunmenu Help.
    aunmenu Window.
    let no_buffers_menu=1

    set ruler
    set number
    set cursorline
    set showcmd
    set nowrap
    set magic
    set showmatch
    set relativenumber
    set gcr=a:blinkon0
    set ttyfast
    set wildmenu
    set wildmode=list:longest,full

    " Autocomplete
    set omnifunc=syntaxcomplete#Complete
    set completeopt-=preview
    set completeopt+=menuone,noselect,noinsert

    " For search
    set incsearch
    set hlsearch

    " tabs
    set tabstop=4
    set shiftwidth=4
    set smarttab
    set expandtab

    " mouse as visual mode selector
    set mouse=a
    set mousemodel=popup

    " always show status bar
    set laststatus=2
    set background=dark
    set noshowmode

    " if terminal support 256 colors
    set t_Co=256

    set nobackup         " no backup files
    set nowritebackup    " only in case you don't want a backup file while editing
    set noswapfile       " no swap files"

" File type specific
    let python_highlight_all=1
    " Python
    "au BufNewFile,BufRead *.py
    "    \ set tabstop=4
    "    \ set softtabstop=4
    "    \ set shiftwidth=4
    "    \ set textwidth=79
    "    \ set expandtab
    "    \ set autoindent
    "    \ set fileformat=unix


"""""""""""""""""""""""""""
" Plugins configure
"""""""""""""""""""""""""""
    """ airline
    let g:airline_detect_paste=1
    let g:airline_powerline_fonts=0
    let g:airline#extensions#tabline#enabled=1
    let g:rehash256 = 1
    let g:airline_powerline_fonts = 1
    let g:airline_theme='powerlineish'

    """ NERDTree
    nmap <silent> <leader>t :NERDTreeTabsToggle<CR>
    " let g:nerdtree_tabs_open_on_console_startup = 1

    """ Synastic
    let g:syntastic_error_symbol = '✘'
    let g:syntastic_warning_symbol = "▲"
    augroup mySyntastic
        au!
        au FileType tex let b:syntastic_mode = "passive"
    augroup END

    """ Gitgutter
    let g:airline#extensions#hunks#non_zero_only = 1

    """ deliamte
    let delimitMate_expand_cr = 1
    augroup mydelimitMate
        au!
        au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
        au FileType tex let b:delimitMate_quotes = ""
        au FileType tex let b:delimitMate_matchpairs = "(:),[:],{:},`:'"
        au FileType python let b:delimitMate_nesting_quotes = ['"', "'"]
    augroup END

    """ ansible-vim
    au BufRead,BufNewFile */playbooks/*.yml set filetype=yaml.ansible

    " Python-mode settings
    let g:pymode_rope = 0
    let g:pymode_rope_completion = 0
    let g:pymode_rope_complete_on_dot = 0
    
    let g:pymode_doc = 0
    let g:pymode_doc_key = 'K'
    let g:pymode_lint = 1
    let g:pymode_lint_checker = "pyflakes,pep8"
    let g:pymode_lint_ignore="E501,W601,C0110"
    let g:pymode_lint_write = 1
    
    let g:pymode_virtualenv = 1
    
    let g:pymode_breakpoint = 1
    let g:pymode_breakpoint_key = '<leader>b'
    
    let g:pymode_syntax = 1
    let g:pymode_syntax_all = 1
    let g:pymode_syntax_indent_errors = g:pymode_syntax_all
    let g:pymode_syntax_space_errors = g:pymode_syntax_all
    
    let g:pymode_folding = 0
    
    let g:pymode_run = 0
    
    let g:jedi#popup_select_first = 0

"""""""""""""""""""""""""
" Mappings configurationn
"""""""""""""""""""""""""

    """ Paste mode
    set pastetoggle=<F3>

    """ Remap ESC to ii
    :imap ii <Esc>

    """ Disable arrow keys in Normal mode
    no <Up> <Nop>
    no <Down> <Nop>
    no <Left> <Nop>
    no <Right> <Nop>

    """ Disable arrow keys in Insert mode
    ino <Up> <Nop>
    ino <Down> <Nop>
    ino <Left> <Nop>
    ino <Right> <Nop>

    """ Reformat file
    " map <F7> mzgg=G`zh

"""""""""""""""""""""""""
" Custom func
"""""""""""""""""""""""""
	augroup vimrc_autocmds
	    autocmd!
	    autocmd FileType ruby,python,javascript,c,cpp highlight Excess ctermbg=DarkGrey guibg=Black
	    autocmd FileType ruby,python,javascript,c,cpp match Excess /\%80v.*/
	    autocmd FileType ruby,python,javascript,c,cpp set nowrap
	augroup END

    fun! CleanExtraSpaces()
        let save_cursor = getpos(".")
        let old_query = getreg('/')
        silent! %s/\s\+$//e
        call setpos('.', save_cursor)
        call setreg('/', old_query)
    endfun

    function! VisualSelection(direction, extra_filter) range
        let l:saved_reg = @"
        execute "normal! vgvy"

        let l:pattern = escape(@", "\\/.*'$^~[]")
        let l:pattern = substitute(l:pattern, "\n$", "", "")

        if a:direction == 'gv'
            call CmdLine("Ack '" . l:pattern . "' " )
        elseif a:direction == 'replace'
            call CmdLine("%s" . '/'. l:pattern . '/')
        endif

        let @/ = l:pattern
        let @" = l:saved_reg
    endfunction

    if has("autocmd")
        autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()
    endif

